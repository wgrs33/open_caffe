# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.

# Find OpenCaffeSDK libraries
#
# Use this module by invoking find_package with the form::
#
#   find_package(OpenCaffeSDK
#     [version] [EXACT]      # Minimum or EXACT version e.g. 1.5.0
#     [REQUIRED]             # Fail with error if OpenCaffeSDK is not found
#     [COMPONENTS <c>...]    # OpenCaffeSDK module(s) by their canonical name
#     )                      # e.g. "cv" for "libopencaffe_sdk_cv"
#
#
# This module finds headers and requested component libraries of the OpenCaffeSDK package.
# Results are reported in variables::
#
#   OpenCaffeSDK_FOUND                 - True if headers and requested libraries were found
#   OpenCaffeSDK_LIBRARIES             - OpenCaffeSDK component targets to be linked
#   OpenCaffeSDK_<c>_FOUND             - True if component <c> was found
#   OpenCaffeSDK_<c>_LIBRARY           - Targets to link for component <c>
#   OpenCaffeSDK_VERSION               - OpenCaffeSDK version value from opencaffe/sdk/version.h
#   OpenCaffeSDK_VERSION_MAJOR         - OpenCaffeSDK major version number (X in X.y.z)
#   OpenCaffeSDK_VERSION_MINOR         - OpenCaffeSDK minor version number (Y in x.Y.z)
#   OpenCaffeSDK_VERSION_PATCH         - OpenCaffeSDK patch version number (Z in x.y.Z)
#
#
# Implicit dependencies such as OpenCaffeSDK::driver requiring
# OpenCaffeSDK::base will be automatically detected and satisfied, even
# if base is not specified when using find_package and if
# OpenCaffeSDK::base is not added to target_link_libraries.
#
#
# Example to find OpenCaffeSDK libraries and use imported targets::
#
#   find_package(OpenCaffeSDK 2.1.0 REQUIRED COMPONENTS base driver)
#   add_executable(foo foo.cpp)
#   target_link_libraries(foo OpenCaffeSDK::base OpenCaffeSDK::driver) # or target_link_libraries(foo ${OpenCaffeSDK_LIBRARIES})


@PACKAGE_INIT@


# Extract the directory where *this* file has been installed (determined at cmake run-time)
# Get the absolute path with no ../.. relative marks, to eliminate implicit linker warnings
get_filename_component(OpenCaffeSDK_CONFIG_PATH "${CMAKE_CURRENT_LIST_DIR}/" REALPATH)

# Set the path where to look for the modules
set(OpenCaffeSDK_COMPONENTS_CONFIG_PATH "${OpenCaffeSDK_CONFIG_PATH}/@OpenCaffeSDK_MODULES_CMAKE_CONFIG_SUBDIR@")

# Save project's policies
cmake_policy(PUSH)
cmake_policy(SET CMP0057 NEW) # if IN_LIST

#######################################################################################################
#
#                                    OpenCaffeSDK utils functions
#
#######################################################################################################

#####################################################################
#
# Gets the list of all subdiretories in a given directory
#
#
# usage :
#     _get_subdirectories(<parent_directory> <output_varname>)
#
#
function(_get_subdirectories parent_dir output_var)
    file(GLOB children RELATIVE ${parent_dir} ${parent_dir}/*)
    set(dirlist "")
    foreach(child ${children})
        if(IS_DIRECTORY ${parent_dir}/${child})
            list(APPEND dirlist ${child})
        endif(IS_DIRECTORY ${parent_dir}/${child})
    endforeach(child)
    set(${output_var} ${dirlist} PARENT_SCOPE)
endfunction(_get_subdirectories)


#####################################################################
#
# Gets the path to files related to a OpenCaffeSDK component
#
#
# usage :
#     _get_OpenCaffeSDK_component_filepath(<component> [CONFIG | VERSION | DEPENDENCIES | DIRECTORY] <output_varname>)
#
#
function(_get_OpenCaffeSDK_component_filepath _comp filecomp output_varname)

    set(_comp_config_path)
    if (EXISTS "${OpenCaffeSDK_COMPONENTS_CONFIG_PATH_LOCAL}/${_comp}/OpenCaffeSDK_${_comp}Config.cmake")
        set(_comp_config_path "${OpenCaffeSDK_COMPONENTS_CONFIG_PATH_LOCAL}")
    else()
        set(_comp_config_path "${OpenCaffeSDK_COMPONENTS_CONFIG_PATH}")
    endif (EXISTS "${OpenCaffeSDK_COMPONENTS_CONFIG_PATH_LOCAL}/${_comp}/OpenCaffeSDK_${_comp}Config.cmake")

    if ("${filecomp}" STREQUAL "CONFIG")
        set (${output_varname} "${_comp_config_path}/${_comp}/OpenCaffeSDK_${_comp}Config.cmake" PARENT_SCOPE)
    elseif("${filecomp}" STREQUAL "VERSION")
        set (${output_varname} "${_comp_config_path}/${_comp}/OpenCaffeSDK_${_comp}ConfigVersion.cmake" PARENT_SCOPE)
    elseif("${filecomp}" STREQUAL "DEPENDENCIES")
        set (${output_varname} "${_comp_config_path}/${_comp}/OpenCaffeSDK_${_comp}Depends.cmake" PARENT_SCOPE)
    elseif("${filecomp}" STREQUAL "DIRECTORY")
        set (${output_varname} "${_comp_config_path}/${_comp}" PARENT_SCOPE)
    else()
        message(FATAL_ERROR "ERROR : unknown option ${filecomp} given to function _get_OpenCaffeSDK_component_filepath")
    endif()
endfunction(_get_OpenCaffeSDK_component_filepath)


#####################################################################
#
# Gets the version of a OpenCaffeSDK component. If version is not found, it's set to "UNKNWON"
#
#
# usage :
#     _get_OpenCaffeSDK_component_version(<component> <output_varname>)
#
#
function(_get_OpenCaffeSDK_component_version _comp filecomp output_varname)
    _get_OpenCaffeSDK_component_filepath("${_comp}" VERSION component_version_filepath)
   if(EXISTS "${component_version_filepath}")
       include("${component_version_filepath}")
       set(${output_varname} "${PACKAGE_VERSION}" PARENT_SCOPE)
   else()
       set(${output_varname} "UNKNWON" PARENT_SCOPE)
   endif(EXISTS "${component_version_filepath}")
endfunction(_get_OpenCaffeSDK_component_version)


#####################################################################
#
# Finds OpenCaffe SDK component's dependencies
#
# This function looks for the additional components needed by a OpenCaffeSDK component, and
# it stores them in the output variable passed to the function
#
#
# usage :
#     _find_OpenCaffeSDK_component_dependencies(<component> <output_varname>)
#
#
# Remark : the list obtained is ordered in a way such that each element on the list can depend only
# from an components listed BEFORE itsself in the list
#
#
function(_find_OpenCaffeSDK_component_dependencies _comp output_varname)

    # Define a recursive function to get all the dependencies chain :
    set (_deps_already_checked_list "")
    function(_get_deps _current_component)

        if("${_current_component}" IN_LIST _deps_already_checked_list)
            return()
        endif()


        _get_OpenCaffeSDK_component_filepath("${_current_component}" DEPENDENCIES component_deps_path)
        if (EXISTS "${component_deps_path}")
            # The file is of the following form :
            # set(OpenCaffeSDK_<c>_NEEDED_COMPONENTS comp1 comp2 ..)
            include("${component_deps_path}")

            foreach(_dep ${OpenCaffeSDK_${_current_component}_NEEDED_COMPONENTS})
                _get_deps("${_dep}")
            endforeach(_dep)

        endif (EXISTS "${component_deps_path}")

        list(APPEND _deps_already_checked_list "${_current_component}")
        set (_deps_already_checked_list "${_deps_already_checked_list}" PARENT_SCOPE)

    endfunction(_get_deps)

    _get_deps("${_comp}")

    # Remove _comp from the dependencies
    list(REMOVE_ITEM _deps_already_checked_list ${_comp})

    # Sent output variable back to the function's parent scope
    set (${output_varname} "${_deps_already_checked_list}" PARENT_SCOPE)

endfunction(_find_OpenCaffeSDK_component_dependencies)


#####################################################################
#
# Finds all OpenCaffe SDK available components
#
# This function looks for all OpenCaffeSDK available components for a given version
#
#
# usage :
#     _find_all_OpenCaffeSDK_available_components(<version_needed> <output_varname>)
#
#
function(_find_all_OpenCaffeSDK_available_components version_needed output_varname)

    # Initialize output variable to empty string
    set (${output_varname} "")

    _get_subdirectories("${OpenCaffeSDK_COMPONENTS_CONFIG_PATH_LOCAL}" local_subdirs)
    _get_subdirectories("${OpenCaffeSDK_COMPONENTS_CONFIG_PATH}" subdirs)

    foreach(_comp ${local_subdirs} ${subdirs})

        if(NOT "${_comp}" IN_LIST ${output_varname})

            # We consider a component is available if we can find its config file and version config file
            _get_OpenCaffeSDK_component_filepath("${_comp}" CONFIG component_config_path)
            if (EXISTS "${component_config_path}")
                _get_OpenCaffeSDK_component_filepath("${_comp}" VERSION component_configversion_path)
                if (EXISTS "${component_configversion_path}")
                    # Check the version is the required one
                    include("${component_configversion_path}")
                    if (${PACKAGE_VERSION} VERSION_EQUAL ${version_needed})
                        list(APPEND ${output_varname} ${_comp})
                    endif (${PACKAGE_VERSION} VERSION_EQUAL ${version_needed})
                endif (EXISTS "${component_configversion_path}")
            endif(EXISTS "${component_config_path}")

        endif(NOT "${_comp}" IN_LIST ${output_varname})

    endforeach(_comp)

    # Send variable back to outside the function scope
    set (${output_varname} "${${output_varname}}" PARENT_SCOPE)

endfunction(_find_all_OpenCaffeSDK_available_components)



#######################################################################################################
#                                                                                                     #
#                                     Find package OpenCaffeSDK                                      #
#                                                                                                     #
#######################################################################################################

############################################################################
#            Extract version information from @VERSION_BARE_FILE@
############################################################################

# Extract OpenCaffeSDK_VERSION from @VERSION_BARE_FILE@
set(_OpenCaffeSDK_VERSION_HEADER_FILEPATH "${PACKAGE_PREFIX_DIR}/@VERSION_FILE_INSTALLATION_PATH_RELATIVE@/@VERSION_BARE_FILE@")
set(_error_message "")
if (EXISTS ${_OpenCaffeSDK_VERSION_HEADER_FILEPATH})

    file(STRINGS "${_OpenCaffeSDK_VERSION_HEADER_FILEPATH}" _OpenCaffeSDK_VERSION_H_CONTENTS REGEX "#define OPENCAFFE_SDK_VERSION_(.*) ")

    set(_missing_version_components "")
    foreach(v MAJOR MINOR PATCH)
        if("${_OpenCaffeSDK_VERSION_H_CONTENTS}" MATCHES "#define OPENCAFFE_SDK_VERSION_${v} ([0-9]+)")
            set(OpenCaffeSDK_VERSION_${v} "${CMAKE_MATCH_1}")
        else()
            set(_missing_version_components "${_missing_version_components} ${v} ")
        endif()
    endforeach(v)

    if(_missing_version_components)
        set(_error_message "could not extract ${_missing_version_components} VERSION for Package OpenCaffeSDK - corrupted file ${_OpenCaffeSDK_VERSION_HEADER_FILEPATH} ?")
    else()
        set(OpenCaffeSDK_VERSION ${OpenCaffeSDK_VERSION_MAJOR}.${OpenCaffeSDK_VERSION_MINOR}.${OpenCaffeSDK_VERSION_PATCH})
    endif(_missing_version_components)

else()

    set(_error_message "could not extract ${v} VERSION for Package OpenCaffeSDK - missing file ${_OpenCaffeSDK_VERSION_HEADER_FILEPATH}")

endif (EXISTS ${_OpenCaffeSDK_VERSION_HEADER_FILEPATH})

if(_error_message)
    set(OpenCaffeSDK_FOUND False)
    if(OpenCaffeSDK_FIND_REQUIRED)
        message(SEND_ERROR "Unable to find the requested OpenCaffeSDK libraries because ${_error_message}")
    else()
        if(NOT OpenCaffeSDK_FIND_QUIETLY)
            message(STATUS "Could NOT find OpenCaffeSDK (${_error_message})")
        endif(NOT OpenCaffeSDK_FIND_QUIETLY)
    endif(OpenCaffeSDK_FIND_REQUIRED)
    cmake_policy(POP)
    return()
endif(_error_message)

############################################################################
#                 Create a list of the components to find
############################################################################
# Remove the duplicates from the list.
list(REMOVE_DUPLICATES OpenCaffeSDK_FIND_COMPONENTS)
if (NOT OpenCaffeSDK_FIND_COMPONENTS)

    # If no component was specifically requested, then find all available ones
    _find_all_OpenCaffeSDK_available_components("${OpenCaffeSDK_VERSION}" _OpenCaffeSDK_components_to_look_for)

else()

    set(_OpenCaffeSDK_components_to_look_for ${OpenCaffeSDK_FIND_COMPONENTS})

endif (NOT OpenCaffeSDK_FIND_COMPONENTS)

# Add the dependencies to the list of the components to look for :
set(_extra_components_needed "")
foreach(_comp ${_OpenCaffeSDK_components_to_look_for})
    _find_OpenCaffeSDK_component_dependencies("${_comp}" _comp_deps)
    foreach(_dep ${_comp_deps})
        if(NOT "${_dep}" IN_LIST _OpenCaffeSDK_components_to_look_for)
            if(NOT "${_dep}" IN_LIST _extra_components_needed)
                list(APPEND _extra_components_needed ${_dep})
            endif(NOT "${_dep}" IN_LIST _extra_components_needed)
        endif(NOT "${_dep}" IN_LIST _OpenCaffeSDK_components_to_look_for)
    endforeach(_dep)
endforeach()
list(APPEND _OpenCaffeSDK_components_to_look_for ${_extra_components_needed})

# To ease later processing, order the list _OpenCaffeSDK_components_to_look_for in a way such that
# any element of the list depends only from components that are BEFORE them in the list
# and set variables _OpenCaffeSDK_${_comp}_DEPS
set(_OpenCaffeSDK_components_to_look_for_ordered)
foreach(_comp ${_OpenCaffeSDK_components_to_look_for})
    if(NOT "${_comp}" IN_LIST _OpenCaffeSDK_components_to_look_for_ordered)
        _find_OpenCaffeSDK_component_dependencies("${_comp}" _OpenCaffeSDK_${_comp}_DEPS)

        # Since function _find_OpenCaffeSDK_component_dependencies already returns an ordered list
        # we just need to iterate over _OpenCaffeSDK_${_comp}_DEPS
        foreach(_dep ${_OpenCaffeSDK_${_comp}_DEPS})
            if(NOT "${_dep}" IN_LIST _OpenCaffeSDK_components_to_look_for_ordered)
                list(APPEND _OpenCaffeSDK_components_to_look_for_ordered ${_dep})
            endif(NOT "${_dep}" IN_LIST _OpenCaffeSDK_components_to_look_for_ordered)
        endforeach(_dep)
        list(APPEND _OpenCaffeSDK_components_to_look_for_ordered ${_comp})
    endif(NOT "${_comp}" IN_LIST _OpenCaffeSDK_components_to_look_for_ordered)
endforeach()


############################################################################
#                      Find the requested components
############################################################################

function(_find_OpenCaffeSDK_component component_name)
    # The configuration files for the components are to be looked for in path ${OpenCaffeSDK_COMPONENTS_CONFIG_PATH}/${_comp},
    # and their config file is named "OpenCaffeSDK_${_comp}Config.cmake", so we can use the cmake built-in function find_package()
    # to check if we can find the component
    _get_OpenCaffeSDK_component_filepath("${_comp}" DIRECTORY OpenCaffeSDK_${_comp}_DIR)
    find_package(OpenCaffeSDK_${_comp}
                 NO_DEFAULT_PATH
                 QUIET)
    set(OpenCaffeSDK_${_comp}_FOUND ${OpenCaffeSDK_${_comp}_FOUND} PARENT_SCOPE)
    set(OpenCaffeSDK_${_comp}_VERSION ${OpenCaffeSDK_${_comp}_VERSION} PARENT_SCOPE)
    set(OpenCaffeSDK_${_comp}_REASON_NOT_FOUND ${OpenCaffeSDK_${_comp}_REASON_NOT_FOUND} PARENT_SCOPE)
endfunction(_find_OpenCaffeSDK_component)

# Find required components
foreach(_comp ${_OpenCaffeSDK_components_to_look_for_ordered})

    _find_OpenCaffeSDK_component(${_comp})

    if (OpenCaffeSDK_${_comp}_FOUND)

        # Check if the found version is the same as the version of OpenCaffeSDK package (to avoid including incompatible versions)

        if (${OpenCaffeSDK_${_comp}_VERSION} VERSION_EQUAL ${OpenCaffeSDK_VERSION})

            set(OpenCaffeSDK_${_comp}_FOUND True)

            # Check if we found the components dependencies (we can do it already because the list is ordered)

            set(_missing_deps "")
            foreach(_dep ${_OpenCaffeSDK_${_comp}_DEPS}) # Variable _OpenCaffeSDK_${_comp}_DEPS stores was set above
                if (NOT OpenCaffeSDK_${_dep}_FOUND)
                    set(OpenCaffeSDK_${_comp}_FOUND False)
                    list(APPEND _missing_deps ${_dep})
                endif (NOT OpenCaffeSDK_${_dep}_FOUND)
            endforeach(_dep)
            if (NOT OpenCaffeSDK_${_comp}_FOUND)
                set(_OpenCaffeSDK_${_comp}_REASON_NOT_FOUND "could not find the following components it depends on :")
                foreach(_missing_dep ${_missing_deps})
                    set(_OpenCaffeSDK_${_comp}_REASON_NOT_FOUND "${_OpenCaffeSDK_${_comp}_REASON_NOT_FOUND} ${_missing_dep}")
                endforeach(_missing_dep)
            endif (NOT OpenCaffeSDK_${_comp}_FOUND)


        else()
            set(OpenCaffeSDK_${_comp}_FOUND False)
            set(_OpenCaffeSDK_${_comp}_REASON_NOT_FOUND "found version ${OpenCaffeSDK_${_comp}_VERSION}, but need version ${OpenCaffeSDK_VERSION}")
        endif (${OpenCaffeSDK_${_comp}_VERSION} VERSION_EQUAL ${OpenCaffeSDK_VERSION})

    else()
        set(_OpenCaffeSDK_${_comp}_REASON_NOT_FOUND "${OpenCaffeSDK_${_comp}_NOT_FOUND_MESSAGE}")
        # TODO : get better log on why the component was not found (for examples of imported target refers to an unknwon target it's because a file *Depends is missing)
        set(OpenCaffeSDK_${_comp}_FOUND False)
    endif (OpenCaffeSDK_${_comp}_FOUND)

endforeach(_comp)

############################################################################
#                        Check required components
############################################################################

# Check required components
if (NOT _OpenCaffeSDK_components_to_look_for_ordered)
    set(OpenCaffeSDK_FOUND False)
else()
    set(OpenCaffeSDK_FOUND True)
    check_required_components(OpenCaffeSDK)
endif (NOT _OpenCaffeSDK_components_to_look_for_ordered)

############################################################################
#          Include targets and set OpenCaffeSDK_LIBRARIES
############################################################################
set(OpenCaffeSDK_LIBRARIES "")
if(OpenCaffeSDK_FOUND)

    set(_OpenCaffeSDK_components_found "")
    set(_OpenCaffeSDK_components_not_found "") # Even if OpenCaffeSDK_FOUND, it could happen that some components were not found if they were not required

    foreach(_comp ${_OpenCaffeSDK_components_to_look_for_ordered})
        if (OpenCaffeSDK_${_comp}_FOUND)
            _get_OpenCaffeSDK_component_filepath("${_comp}" CONFIG component_config_path)
            include("${component_config_path}")

            list(APPEND OpenCaffeSDK_LIBRARIES OpenCaffeSDK::${_comp})
            set(OpenCaffeSDK_${_comp}_LIBRARY OpenCaffeSDK::${_comp})

            list(APPEND _OpenCaffeSDK_components_found ${_comp})
        else()
            list(APPEND _OpenCaffeSDK_components_not_found ${_comp})
        endif (OpenCaffeSDK_${_comp}_FOUND)
    endforeach(_comp)

    # Print messages information
    if(NOT OpenCaffeSDK_FIND_QUIETLY)
        message(STATUS "Found OpenCaffeSDK : ${PACKAGE_PREFIX_DIR} (found version: ${OpenCaffeSDK_VERSION})")
        message(STATUS "Found the following OpenCaffeSDK libraries:")

        foreach(_comp ${_OpenCaffeSDK_components_found})
            message (STATUS "  ${_comp}")
        endforeach(_comp)

        if (_OpenCaffeSDK_components_not_found)
            message(STATUS "Could NOT find the following OpenCaffeSDK libraries:")
            foreach(_comp ${_OpenCaffeSDK_components_not_found})
                if(_OpenCaffeSDK_${_comp}_REASON_NOT_FOUND)
                    message (STATUS "  ${_comp} (${_OpenCaffeSDK_${_comp}_REASON_NOT_FOUND})")
                else()
                    message (STATUS "  ${_comp}")
                endif(_OpenCaffeSDK_${_comp}_REASON_NOT_FOUND)
            endforeach(_comp)
        endif(_OpenCaffeSDK_components_not_found)

    endif(NOT OpenCaffeSDK_FIND_QUIETLY)

else()
    if(OpenCaffeSDK_FIND_REQUIRED)
        set(err_msg)

        if(OpenCaffeSDK_FIND_COMPONENTS)
            set(err_msg "Unable to find the requested OpenCaffeSDK libraries:")
            foreach(_comp ${OpenCaffeSDK_FIND_COMPONENTS})
                if(NOT OpenCaffeSDK_${_comp}_FOUND)
                    if(OpenCaffeSDK_FIND_REQUIRED_${_comp})
                        set(err_msg "${err_msg}\n    ${_comp}")
                        if(_OpenCaffeSDK_${_comp}_REASON_NOT_FOUND)
                            set(err_msg "${err_msg} (${_OpenCaffeSDK_${_comp}_REASON_NOT_FOUND})")
                        endif(_OpenCaffeSDK_${_comp}_REASON_NOT_FOUND)
                    endif(OpenCaffeSDK_FIND_REQUIRED_${_comp})
                endif()
            endforeach(_comp)
        else()
            set(err_msg "Unable to find OpenCaffeSDK")
            if (NOT _OpenCaffeSDK_components_to_look_for_ordered)
                set(err_msg "${err_msg} : no component available ")
            endif (NOT _OpenCaffeSDK_components_to_look_for_ordered)
        endif(OpenCaffeSDK_FIND_COMPONENTS)

        message(SEND_ERROR "${err_msg}\n")

    else()
        if(NOT OpenCaffeSDK_FIND_QUIETLY)
            message(STATUS "Could NOT find OpenCaffeSDK")
        endif(NOT OpenCaffeSDK_FIND_QUIETLY)
    endif(OpenCaffeSDK_FIND_REQUIRED)
endif(OpenCaffeSDK_FOUND)

cmake_policy(POP)
